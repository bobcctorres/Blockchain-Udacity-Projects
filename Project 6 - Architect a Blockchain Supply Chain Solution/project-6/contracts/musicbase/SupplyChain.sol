pragma solidity ^0.4.24;

// Import Core Libraries
import "../musiccore/Ownable.sol";

// Import Roles Libraries
import "../musicaccesscontrol/ArtistRole.sol";
import "../musicaccesscontrol/RecordCompanyRole.sol";
import "../musicaccesscontrol/DistributorRole.sol";
import "../musicaccesscontrol/FactoryRole.sol";
import "../musicaccesscontrol/RetailerRole.sol";
import "../musicaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, ArtistRole, RecordCompanyRole, FactoryRole, RetailerRole {

  ArtistRole private artists;

  // Define 'owner'
  address _owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Composed,     // 0
    Paid,         // 1
    Mixed,        // 2
    Mastered,     // 3
    Contracted,   // 4
    Packed,       // 5
    Shipped,      // 6
    Received,     // 7
    Purchased     // 8
    }

  State constant defaultState = State.Composed;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Record Company, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originArtistID; // Metamask-Ethereum address of the Artist
    string  originArtistName; // Artist Name
    string  originArtistInformation;  // Artist Information
    string  originRecordCompanyLatitude; // Record Company Latitude
    string  originRecordCompanyLongitude;  // Record Company Longitude
    string  musicMixInfo;  // Mixing authoring info
    string  musicMasterInfo; // mastering info
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    string  musicTitle;    // Music Title
    State   itemState;  // Product State as represented in the enum above
    address recordCompanyID;  // Metamask-Ethereum address of the Record Company
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address factoryID;  // Metamask-Ethereum address of the Case (Plastic) Factory
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 9 events with the same 9 state values and accept 'upc' as input argument
  event Composed(uint upc);
  event Paid(uint upc);
  event Mixed(uint upc);
  event Mastered(uint upc);
  event Contracted(uint upc);
  event Packed(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract (inherited)
  /*modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }*/

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Composed
  modifier composed(uint _upc) {
    require(items[_upc].itemState == State.Composed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Paid
  modifier paid(uint _upc) {
    require(items[_upc].itemState == State.Paid);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Mixed
  modifier mixed(uint _upc) {
    require(items[_upc].itemState == State.Mixed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Mastered
  modifier mastered(uint _upc) {
    require(items[_upc].itemState == State.Mastered);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Contracted
  modifier contracted(uint _upc) {
    require(items[_upc].itemState == State.Contracted);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    _owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == _owner) {
      selfdestruct(_owner);
    }
  }

  // Define a function 'composeItem' that allows an artist to mark an item 'Composed'
  // It's a tradicional music recording business such a record company is binded to the project since its conception.
  function composeItem(uint _upc, string _musicTitle, address _recordCompanyID, address _originArtistID, string _originArtistName, string _originArtistInformation, string  _originRecordCompanyLatitude, string  _originRecordCompanyLongitude, string  _productNotes) public 
  {
    //assert (isArtist (msg.sender));
    //assert (isRecordCompany(_recordCompanyID));

    // Add the new item as part of Composition
    items[_upc] = Item ({
      upc: _upc, 
      sku: sku, 
      ownerID: _originArtistID, //msg.sender,
      originArtistID: _originArtistID,
      originArtistName: _originArtistName,
      originArtistInformation: _originArtistInformation,
      originRecordCompanyLatitude: _originRecordCompanyLatitude,
      originRecordCompanyLongitude: _originRecordCompanyLongitude,
      productNotes: _productNotes,
      musicTitle: _musicTitle,
      itemState: State.Composed,
      recordCompanyID: _recordCompanyID,
      distributorID: 0,
      factoryID: 0,
      retailerID: 0,
      consumerID: 0,
      productPrice: 0,
      musicMasterInfo: "",
      musicMixInfo: "",
      productID: _upc + sku
      });

    // Increment sku
    sku = sku + 1;
    items[_upc].itemState = State.Composed;

    // Emit the appropriate event
    emit Composed (_upc);    
  }

  // Define a function 'payRoyaltyItem' that allows a record company to pay for a composition and Artist to mark an item as 'Paid'
  function payRoyaltyItem(uint _upc) composed(_upc) verifyCaller(items[_upc].recordCompanyID) public
  // Call modifier to check if upc has passed previous supply chain stage (music is composed)
  
  // Call modifier to verify caller of this function - Music ownership will be transfered to Record Company
  
  {
    assert (isRecordCompany(msg.sender));
    // Update the appropriate fields
    items[_upc].ownerID = items[_upc].recordCompanyID;

    _transferOwnership (items[_upc].recordCompanyID);
    items[_upc].itemState = State.Paid;

    // Emit the appropriate event
    emit Paid (_upc);
  }

  // Define a function 'createMusicMix' that allows a record company to mark an item 'Mixed'
  function createMusicMix(uint _upc, string _musicMixInfo) paid(_upc) verifyCaller(items[_upc].ownerID) public 
  // Call modifier to check if upc has passed previous supply chain stage (Paid)
  
  // Call modifier to verify caller of this function
  
  {
    assert (isRecordCompany(items[_upc].ownerID));

    // Update the appropriate fields
    items[_upc].musicMixInfo = _musicMixInfo;
    items[_upc].itemState = State.Mixed;

    // Emit the appropriate event
    emit Mixed (_upc);
  }

  // Define a function 'createMusicMaster' that allows a record company to mark an item 'Mastered'
  function createMusicMaster(uint _upc, string _musicMasterInfo) mixed(_upc) verifyCaller(items[_upc].ownerID) public 
  // Call modifier to check if upc has passed previous supply chain stage (Mixed)
  
  // Call modifier to verify caller of this function
  
  {
    assert (isRecordCompany(msg.sender));

    // Update the appropriate fields
    items[_upc].musicMasterInfo = _musicMasterInfo;
    items[_upc].itemState =  State.Mastered;

    // Emit the appropriate event
    emit Mastered (_upc);
  }

  // Define a function 'sellItem' (payContract by distributor) that allows a record company to mark an music/Album 'ForSaleContracted' and transfer ownership
  function sellItem(uint _upc, address _distributorID) mastered(_upc) verifyCaller(items[_upc].ownerID) public
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    assert (isRecordCompany(msg.sender));
    //assert (isDistributor(_distributorID));

    // Update the appropriate fields
    items[_upc].distributorID = _distributorID;
    items[_upc].ownerID = _distributorID;

    transferOwnership (items[_upc].distributorID);
    items[_upc].itemState =  State.Contracted;

    // Emit the appropriate event
    emit Contracted (_upc); 
  }

  // Define a function 'buyDiscsAndCases' that allows the disributor to buy material for physical product enclosure
  // OBS: For simplification reasons we are not modeling EAN and stock control functionalities
  // Also we are not using the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyDiscsAndCases(uint _upc, address _factoryID) contracted(_upc) verifyCaller(items[_upc].ownerID) public //payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough (not implemented inside the blockchain - will be paid not in Ether)
    // Call modifer to send any excess ether back to buyer (not implemented inside the blockchain - will be paid not in Ether)
    
    {
      assert (isDistributor(msg.sender));
      //assert (isFactory(_factoryID));

      // Update the appropriate fields
      items[_upc].factoryID = _factoryID;
      
      // Transfer money to factory (not in the Etherium network)
      
      // emit the appropriate event (none in here)
      
  }

// Define a function 'packItem' that allows a plastic factory to mark an item 'Packed'
  function packItem(uint _upc) contracted(_upc) verifyCaller(items[_upc].factoryID) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    assert (isFactory(msg.sender));
    // Update the appropriate fields
    items[_upc].itemState =  State.Packed;
    
    // Emit the appropriate event
    emit Packed (_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc, address _retailerID) packed(_upc) verifyCaller(items[_upc].ownerID) public
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
      assert (isDistributor(msg.sender));
    
      // Update the appropriate fields
      items[_upc].retailerID = _retailerID;
      items[_upc].itemState =  State.Shipped;

      transferOwnership (_retailerID);
      // Emit the appropriate event
      emit Shipped (_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped.
  // To simplify, here we set up retail price
  function receiveItem(uint _upc, uint _price) shipped(_upc) verifyCaller(items[_upc].ownerID) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
      assert (isRetailer(msg.sender));

      // Update the appropriate fields
      items[_upc].productPrice = _price;
      items[_upc].itemState =  State.Received;

      // Emit the appropriate event
      emit Received (_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) received(_upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
      // Call modifer to check if buyer has paid enough
      // Call modifer to send any excess ether back to buyer

      assert (isConsumer(msg.sender));

      // Update the appropriate fields    
      items[_upc].consumerID = msg.sender;
      uint price = items[_upc].productPrice;
      
      items[_upc].itemState =  State.Purchased;
      // Transfer money to seller
      items[_upc].retailerID.transfer(price);
      //items[_upc].ownerID = msg.sender;

      _transferOwnership (msg.sender);
        
      // emit the appropriate event
      emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originArtistID,
  string  originArtistName,
  string  originArtistInformation,
  string  musicTitle,
  address recordCompanyID
  ) 
  {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originArtistID =items[_upc].originArtistID;
    originArtistName = items[_upc].originArtistName;
    originArtistInformation = items[_upc].originArtistInformation;
    musicTitle = items[_upc].musicTitle;
    recordCompanyID = items[_upc].recordCompanyID;
      
    return 
    (
    itemSKU,
    itemUPC,
    ownerID,
    originArtistID,
    originArtistName,
    originArtistInformation,
    musicTitle,
    recordCompanyID
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;

    return 
    (
    itemSKU,
    itemUPC,
    productID,
    productNotes,
    productPrice,
    itemState,
    distributorID,
    retailerID,
    consumerID
    );
  }
}
