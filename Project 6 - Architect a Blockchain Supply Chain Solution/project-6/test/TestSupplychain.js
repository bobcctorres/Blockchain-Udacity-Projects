// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originArtistID = accounts[1]
    const musicTitle = "Super Song"
    const originArtistName = "John Doe"
    const originArtistInformation = "Yarray Valley Singer"
    const originRecordCompanyLatitude = "-38.239770"
    const originRecordCompanyLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best songs Album Single"
    const productPrice = web3.utils.toWei(1, "ether");
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const recordCompanyID = accounts[5]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Artist: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    console.log("recordCompany: accounts[5] ", accounts[5])
    

    // 1st Test
    //composeItem(uint _upc, string _musicTitle, address _recordCompanyID, address _originArtistID, string _originArtistName, string _originArtistInformation, string  _originRecordCompanyLatitude, string  _originRecordCompanyLongitude, string  _productNotes)
    it("Testing smart contract function composeItem() that allows an artist to compose a music", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Composed()
        var event = supplyChain.Composed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Composed by calling function composeItem()
        await supplyChain.composeItem(upc, musicTitle, recordCompanyID, originArtistID, originArtistName, originArtistInformation, originRecordCompanyLatitude, originRecordCompanyLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originArtistID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], recordCompanyID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })

    // 2nd Test
    //payRoyaltyItem(uint _upc) composed(_upc) verifyCaller(items[_upc].recordCompanyID)
    it("Testing smart contract function payRoyaltyItem() that allows a Record company to pay royalties for music", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // makes sure the caller is a Record Company
        var spID = await supplyChain.ownerAddress()
        await supplyChain.composeItem(upc, musicTitle, spID, originArtistID, originArtistName, originArtistInformation, originRecordCompanyLatitude, originRecordCompanyLongitude, productNotes)
        

        // Watch the emitted event Paid()
        var event = supplyChain.Paid()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Paid by calling function payRoyaltyItem()
        await supplyChain.payRoyaltyItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+1, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 3rd Test
    // createMusicMix(uint _upc, string _musicMixInfo)
    it("Testing smart contract function createMusicMix() that allows a record company to mix the music", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // makes sure the caller is a Record Company
        var spID = await supplyChain.ownerAddress()
        await supplyChain.composeItem(upc, musicTitle, spID, originArtistID, originArtistName, originArtistInformation, originRecordCompanyLatitude, originRecordCompanyLongitude, productNotes)
        await supplyChain.payRoyaltyItem(upc)

        // Watch the emitted event Mixed()
        var event = supplyChain.Mixed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mixed by calling function payRoyaltyItem()
        await supplyChain.createMusicMix(upc, "Mixed by Me Featuring Us")

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+2, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 4th Test
    // createMusicMaster(uint _upc, string _musicMasterInfo)
    it("Testing smart contract function createMusicMaster() that allows a record company to master music", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // makes sure the caller is a Record Company
        var spID = await supplyChain.ownerAddress()
        await supplyChain.composeItem(upc, musicTitle, spID, originArtistID, originArtistName, originArtistInformation, originRecordCompanyLatitude, originRecordCompanyLongitude, productNotes)
        await supplyChain.payRoyaltyItem(upc)
        await supplyChain.createMusicMix(upc, "Mixed by Me Featuring Us")

        // Watch the emitted event Mastered()
        var event = supplyChain.Mastered()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function createMusicMaster()
        await supplyChain.createMusicMaster(upc, "Mastered by The Master")

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+3, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
          
    })    

    var supplyChain;  
    var spID;  
    var distrSC;
    var spDtID;
    
    // 5th Test
    // sellItem(uint _upc, address _distributorID)
    it("Testing smart contract function sellItem() that allows a distributor to buy the item", async() => {
        //const supplyChain = await SupplyChain.deployed()
        supplyChain = await SupplyChain.deployed()
        distrSC = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // makes sure the caller is a Record Company
        //var spID = await supplyChain.ownerAddress()
        spID = await supplyChain.ownerAddress()
        spDtID = await distrSC.ownerAddress()
        await supplyChain.composeItem(upc, musicTitle, spID, originArtistID, originArtistName, originArtistInformation, originRecordCompanyLatitude, originRecordCompanyLongitude, productNotes)
        await supplyChain.payRoyaltyItem(upc)
        await supplyChain.createMusicMix(upc, "Mixed by Me Featuring Us")
        await supplyChain.createMusicMaster(upc, "Mastered by The Master")

        // Watch the emitted event Contracted()
        var event = supplyChain.Contracted()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await supplyChain.sellItem(upc, spDtID)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spDtID, 'Error: Missing or Invalid ownerID')  // Now it is the Distributor
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    


    var  factorySC;
    var spFtID;     

    // 6th Test
    // buyDiscsAndCases(uint _upc, address _factoryID) contracted(_upc) verifyCaller(items[_upc].ownerID)
    it("Testing smart contract function buyDiscsAndCases() that allows a distributor to buy cases and package for item", async() => {
        //distrSC = await SupplyChain.deployed()
        factorySC = await SupplyChain.deployed()
        spFtID = await factorySC.ownerAddress()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
        
        // Watch the emitted event Contracted()
        var event = supplyChain.Contracted()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await distrSC.buyDiscsAndCases(upc, spFtID)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spDtID, 'Error: Missing or Invalid ownerID') // Owner is Distributor
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, false, 'Invalid event emitted') // No state is emitted
    })    


    // 7th Test
    // packItem(uint _upc) contracted(_upc) verifyCaller(items[_upc].factoryID)
    it("Testing smart contract function packItem() that allows a distributor to pack the item", async() => {
      
        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await distrSC.packItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spDtID, 'Error: Missing or Invalid ownerID') // Owner is Distributor
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
    

    var RetailerSupplyChain;
    var spRetID;

    // 8th Test
    // shipItem(uint _upc, address _retailerID) packed(_upc) verifyCaller(items[_upc].ownerID) public
    it("Testing smart contract function packItem() that allows a distributor to pack the item", async() => {
        RetailerSupplyChain = await SupplyChain.deployed()
        spRetID = await RetailerSupplyChain.ownerAddress()

        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await distrSC.shipItem(upc, spRetID)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spRetID, 'Error: Missing or Invalid ownerID') // Owner is Retailer
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
    
    // 9th Test
    // receiveItem(uint _upc, uint _price) shipped(_upc) verifyCaller(items[_upc].ownerID) public 
    it("Testing smart contract function receiveItem() that allows a retailer to mark music received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await RetailerSupplyChain.receiveItem(upc, productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
             
        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spRetID, 'Error: Missing or Invalid ownerID') // Owner is Retailer
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    var spConID;
    var consumerSupplyChain;

    // 10th Test
    // purchaseItem(uint _upc) received(_upc) public payable
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase music", async() => {
        consumerSupplyChain = await SupplyChain.deployed()
        spConID = await consumerSupplyChain.ownerAddress()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false        
                
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Mastered by calling function sellItem()
        await consumerSupplyChain.purchaseItem(upc, {value: productPrice, gasPrice: 0})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await consumerSupplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await consumerSupplyChain.fetchItemBufferTwo.call(upc)
             
        // Verify the result set
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spConID, 'Error: Missing or Invalid ownerID') // Owner is Consumer
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 10th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await consumerSupplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku+4, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], spConID, 'Error: Missing or Invalid ownerID') // Owner is Consumer
        assert.equal(resultBufferOne[3], originArtistID, 'Error: Missing or Invalid originArtistID')
        assert.equal(resultBufferOne[4], originArtistName, 'Error: Missing or Invalid originArtistName')
        assert.equal(resultBufferOne[5], originArtistInformation, 'Error: Missing or Invalid originArtistInformation')
        assert.equal(resultBufferOne[6], musicTitle, 'Error: Missing or Invalid musicTitle')
        assert.equal(resultBufferOne[7], spID, 'Error: Missing or Invalid recordCompanyID')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await consumerSupplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
    })

});

